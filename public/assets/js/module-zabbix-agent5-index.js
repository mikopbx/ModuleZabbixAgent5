"use strict";

/* global globalRootUrl, globalTranslate, Form */
var ModuleZabbixAgent5 = {
  $formObj: $('#module-zabbix-agent5-form'),
  $disabilityFields: $('#module-zabbix-agent5-form  .disability'),
  $statusToggle: $('#module-status-toggle'),
  $moduleStatus: $('#status'),

  /**
   * On page load we init some Semantic UI library
   */
  initialize: function initialize() {
    ModuleZabbixAgent5.checkStatusToggle();
    window.addEventListener('ModuleStatusChanged', ModuleZabbixAgent5.checkStatusToggle);
    ModuleZabbixAgent5.initializeForm();
    ModuleZabbixAgent5.initializeAce();
  },

  /**
   * Initializes the Ace editor instance.
   * Sets up Ace editor with a monokai theme and custom options.
   * Attaches change handler to the editor session.
   */
  initializeAce: function initializeAce() {
    var configFileText = ModuleZabbixAgent5.$formObj.form('get value', 'configContent');
    var aceHeight = window.innerHeight - 380;
    var rowsCount = Math.round(aceHeight / 16.3);
    $(window).load(function () {
      $('.application-code').css('min-height', "".concat(aceHeight, "px"));
    });
    configFileText.editor = ace.edit('application-code');
    configFileText.editor.getSession().setValue(configFileText);
    configFileText.editor.setTheme('ace/theme/monokai');
    configFileText.editor.resize();
    configFileText.editor.getSession().on('change', function () {
      // Trigger change event to acknowledge the modification
      Form.dataChanged();
    });
    configFileText.editor.setOptions({
      maxLines: rowsCount,
      showPrintMargin: false,
      showLineNumbers: false
    });
  },

  /**
   * Callback function to be called before the form is sent
   * @param {Object} settings - The current settings of the form
   * @returns {Object} - The updated settings of the form
   */
  cbBeforeSendForm: function cbBeforeSendForm(settings) {
    var result = settings;
    result.data = ModuleZabbixAgent5.$formObj.form('get values');
    result.data.configContent = ModuleZabbixAgent5.editor.getValue();
    return result;
  },

  /**
   * Some actions after forms send
   */
  cbAfterSendForm: function cbAfterSendForm() {},

  /**
   * Initialize form parameters
   */
  initializeForm: function initializeForm() {
    Form.$formObj = ModuleZabbixAgent5.$formObj;
    Form.url = "".concat(globalRootUrl, "module-zabbix-agent5/save");
    Form.validateRules = ModuleZabbixAgent5.validateRules;
    Form.cbBeforeSendForm = ModuleZabbixAgent5.cbBeforeSendForm;
    Form.cbAfterSendForm = ModuleZabbixAgent5.cbAfterSendForm;
    Form.initialize();
  }
};
$(document).ready(function () {
  ModuleZabbixAgent5.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGUtemFiYml4LWFnZW50NS1pbmRleC5qcyJdLCJuYW1lcyI6WyJNb2R1bGVaYWJiaXhBZ2VudDUiLCIkZm9ybU9iaiIsIiQiLCIkZGlzYWJpbGl0eUZpZWxkcyIsIiRzdGF0dXNUb2dnbGUiLCIkbW9kdWxlU3RhdHVzIiwiaW5pdGlhbGl6ZSIsImNoZWNrU3RhdHVzVG9nZ2xlIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImluaXRpYWxpemVGb3JtIiwiaW5pdGlhbGl6ZUFjZSIsImNvbmZpZ0ZpbGVUZXh0IiwiZm9ybSIsImFjZUhlaWdodCIsImlubmVySGVpZ2h0Iiwicm93c0NvdW50IiwiTWF0aCIsInJvdW5kIiwibG9hZCIsImNzcyIsImVkaXRvciIsImFjZSIsImVkaXQiLCJnZXRTZXNzaW9uIiwic2V0VmFsdWUiLCJzZXRUaGVtZSIsInJlc2l6ZSIsIm9uIiwiRm9ybSIsImRhdGFDaGFuZ2VkIiwic2V0T3B0aW9ucyIsIm1heExpbmVzIiwic2hvd1ByaW50TWFyZ2luIiwic2hvd0xpbmVOdW1iZXJzIiwiY2JCZWZvcmVTZW5kRm9ybSIsInNldHRpbmdzIiwicmVzdWx0IiwiZGF0YSIsImNvbmZpZ0NvbnRlbnQiLCJnZXRWYWx1ZSIsImNiQWZ0ZXJTZW5kRm9ybSIsInVybCIsImdsb2JhbFJvb3RVcmwiLCJ2YWxpZGF0ZVJ1bGVzIiwiZG9jdW1lbnQiLCJyZWFkeSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUVBLElBQU1BLGtCQUFrQixHQUFHO0FBQzFCQyxFQUFBQSxRQUFRLEVBQUVDLENBQUMsQ0FBQyw0QkFBRCxDQURlO0FBRTFCQyxFQUFBQSxpQkFBaUIsRUFBRUQsQ0FBQyxDQUFDLHlDQUFELENBRk07QUFHMUJFLEVBQUFBLGFBQWEsRUFBRUYsQ0FBQyxDQUFDLHVCQUFELENBSFU7QUFJMUJHLEVBQUFBLGFBQWEsRUFBRUgsQ0FBQyxDQUFDLFNBQUQsQ0FKVTs7QUFLMUI7QUFDRDtBQUNBO0FBQ0NJLEVBQUFBLFVBUjBC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LENBQUMyQyxRQUFELENBQUQsQ0FBWUMsS0FBWixDQUFrQixZQUFNO0FBQ3ZCOUMsRUFBQUEsa0JBQWtCLENBQUNNLFVBQW5CO0FBQ0EsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBnbG9iYWxSb290VXJsLCBnbG9iYWxUcmFuc2xhdGUsIEZvcm0gKi9cblxuY29uc3QgTW9kdWxlWmFiYml4QWdlbnQ1ID0ge1xuXHQkZm9ybU9iajogJCgnI21vZHVsZS16YWJiaXgtYWdlbnQ1LWZvcm0nKSxcblx0JGRpc2FiaWxpdHlGaWVsZHM6ICQoJyNtb2R1bGUtemFiYml4LWFnZW50NS1mb3JtICAuZGlzYWJpbGl0eScpLFxuXHQkc3RhdHVzVG9nZ2xlOiAkKCcjbW9kdWxlLXN0YXR1cy10b2dnbGUnKSxcblx0JG1vZHVsZVN0YXR1czogJCgnI3N0YXR1cycpLFxuXHQvKipcblx0ICogT24gcGFnZSBsb2FkIHdlIGluaXQgc29tZSBTZW1hbnRpYyBVSSBsaWJyYXJ5XG5cdCAqL1xuXHRpbml0aWFsaXplKCkge1xuXHRcdE1vZHVsZVphYmJpeEFnZW50NS5jaGVja1N0YXR1c1RvZ2dsZSgpO1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdNb2R1bGVTdGF0dXNDaGFuZ2VkJywgTW9kdWxlWmFiYml4QWdlbnQ1LmNoZWNrU3RhdHVzVG9nZ2xlKTtcblx0XHRNb2R1bGVaYWJiaXhBZ2VudDUuaW5pdGlhbGl6ZUZvcm0oKTtcblx0XHRNb2R1bGVaYWJiaXhBZ2VudDUuaW5pdGlhbGl6ZUFjZSgpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBJbml0aWFsaXplcyB0aGUgQWNlIGVkaXRvciBpbnN0YW5jZS5cblx0ICogU2V0cyB1cCBBY2UgZWRpdG9yIHdpdGggYSBtb25va2FpIHRoZW1lIGFuZCBjdXN0b20gb3B0aW9ucy5cblx0ICogQXR0YWNoZXMgY2hhbmdlIGhhbmRsZXIgdG8gdGhlIGVkaXRvciBzZXNzaW9uLlxuXHQgKi9cblx0aW5pdGlhbGl6ZUFjZSgpIHtcblx0XHRjb25zdCBjb25maWdGaWxlVGV4dCA9IE1vZHVsZVphYmJpeEFnZW50NS4kZm9ybU9iai5mb3JtKCdnZXQgdmFsdWUnLCAnY29uZmlnQ29udGVudCcpO1xuXHRcdGNvbnN0IGFjZUhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIDM4MDtcblx0XHRjb25zdCByb3dzQ291bnQgPSBNYXRoLnJvdW5kKGFjZUhlaWdodCAvIDE2LjMpO1xuXHRcdCQod2luZG93KS5sb2FkKGZ1bmN0aW9uICgpIHtcblx0XHRcdCQoJy5hcHBsaWNhdGlvbi1jb2RlJykuY3NzKCdtaW4taGVpZ2h0JywgYCR7YWNlSGVpZ2h0fXB4YCk7XG5cdFx0fSk7XG5cdFx0Y29uZmlnRmlsZVRleHQuZWRpdG9yID0gYWNlLmVkaXQoJ2FwcGxpY2F0aW9uLWNvZGUnKTtcblx0XHRjb25maWdGaWxlVGV4dC5lZGl0b3IuZ2V0U2Vzc2lvbigpLnNldFZhbHVlKGNvbmZpZ0ZpbGVUZXh0KTtcblx0XHRjb25maWdGaWxlVGV4dC5lZGl0b3Iuc2V0VGhlbWUoJ2FjZS90aGVtZS9tb25va2FpJyk7XG5cdFx0Y29uZmlnRmlsZVRleHQuZWRpdG9yLnJlc2l6ZSgpO1xuXHRcdGNvbmZpZ0ZpbGVUZXh0LmVkaXRvci5nZXRTZXNzaW9uKCkub24oJ2NoYW5nZScsICgpID0+IHtcblx0XHRcdC8vIFRyaWdnZXIgY2hhbmdlIGV2ZW50IHRvIGFja25vd2xlZGdlIHRoZSBtb2RpZmljYXRpb25cblx0XHRcdEZvcm0uZGF0YUNoYW5nZWQoKTtcblx0XHR9KTtcblx0XHRjb25maWdGaWxlVGV4dC5lZGl0b3Iuc2V0T3B0aW9ucyh7XG5cdFx0XHRtYXhMaW5lczogcm93c0NvdW50LFxuXHRcdFx0c2hvd1ByaW50TWFyZ2luOiBmYWxzZSxcblx0XHRcdHNob3dMaW5lTnVtYmVyczogZmFsc2UsXG5cdFx0fSk7XG5cdH0sXG5cdC8qKlxuXHQgKiBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgYmVmb3JlIHRoZSBmb3JtIGlzIHNlbnRcblx0ICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzIC0gVGhlIGN1cnJlbnQgc2V0dGluZ3Mgb2YgdGhlIGZvcm1cblx0ICogQHJldHVybnMge09iamVjdH0gLSBUaGUgdXBkYXRlZCBzZXR0aW5ncyBvZiB0aGUgZm9ybVxuXHQgKi9cblx0Y2JCZWZvcmVTZW5kRm9ybShzZXR0aW5ncykge1xuXHRcdGNvbnN0IHJlc3VsdCA9IHNldHRpbmdzO1xuXHRcdHJlc3VsdC5kYXRhID0gTW9kdWxlWmFiYml4QWdlbnQ1LiRmb3JtT2JqLmZvcm0oJ2dldCB2YWx1ZXMnKTtcblx0XHRyZXN1bHQuZGF0YS5jb25maWdDb250ZW50ID0gTW9kdWxlWmFiYml4QWdlbnQ1LmVkaXRvci5nZXRWYWx1ZSgpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sXG5cdC8qKlxuXHQgKiBTb21lIGFjdGlvbnMgYWZ0ZXIgZm9ybXMgc2VuZFxuXHQgKi9cblx0Y2JBZnRlclNlbmRGb3JtKCkge1xuXG5cdH0sXG5cdC8qKlxuXHQgKiBJbml0aWFsaXplIGZvcm0gcGFyYW1ldGVyc1xuXHQgKi9cblx0aW5pdGlhbGl6ZUZvcm0oKSB7XG5cdFx0Rm9ybS4kZm9ybU9iaiA9IE1vZHVsZVphYmJpeEFnZW50NS4kZm9ybU9iajtcblx0XHRGb3JtLnVybCA9IGAke2dsb2JhbFJvb3RVcmx9bW9kdWxlLXphYmJpeC1hZ2VudDUvc2F2ZWA7XG5cdFx0Rm9ybS52YWxpZGF0ZVJ1bGVzID0gTW9kdWxlWmFiYml4QWdlbnQ1LnZhbGlkYXRlUnVsZXM7XG5cdFx0Rm9ybS5jYkJlZm9yZVNlbmRGb3JtID0gTW9kdWxlWmFiYml4QWdlbnQ1LmNiQmVmb3JlU2VuZEZvcm07XG5cdFx0Rm9ybS5jYkFmdGVyU2VuZEZvcm0gPSBNb2R1bGVaYWJiaXhBZ2VudDUuY2JBZnRlclNlbmRGb3JtO1xuXHRcdEZvcm0uaW5pdGlhbGl6ZSgpO1xuXHR9LFxufTtcblxuJChkb2N1bWVudCkucmVhZHkoKCkgPT4ge1xuXHRNb2R1bGVaYWJiaXhBZ2VudDUuaW5pdGlhbGl6ZSgpO1xufSk7XG5cbiJdfQ==