"use strict";

/* global globalRootUrl, globalTranslate, Form, ace */
var ModuleZabbixAgent5 = {
  $formObj: $('#module-zabbix-agent5-form'),
  $disabilityFields: $('#module-zabbix-agent5-form  .disability'),
  $statusToggle: $('#module-status-toggle'),
  $moduleStatus: $('#status'),
  // Ace editor instance
  editor: '',

  /**
   * On page load we init some Semantic UI library
   */
  initialize: function initialize() {
    ModuleZabbixAgent5.checkStatusToggle();
    window.addEventListener('ModuleStatusChanged', ModuleZabbixAgent5.checkStatusToggle);
    ModuleZabbixAgent5.initializeForm();
    ModuleZabbixAgent5.initializeAce();
  },

  /**
   * Checks the status toggle and updates the disability fields.
   */
  checkStatusToggle: function checkStatusToggle() {
    if (ModuleZabbixAgent5.$statusToggle.checkbox('is checked')) {
      ModuleZabbixAgent5.$disabilityFields.removeClass('disabled');
    } else {
      ModuleZabbixAgent5.$disabilityFields.addClass('disabled');
    }
  },

  /**
   * Initializes the Ace editor instance.
   * Sets up Ace editor with a monokai theme and custom options.
   * Attaches change handler to the editor session.
   */
  initializeAce: function initializeAce() {
    var configFileText = ModuleZabbixAgent5.$formObj.form('get value', 'configContent');
    var aceHeight = window.innerHeight - 380;
    var rowsCount = Math.round(aceHeight / 16.3);
    $(window).load(function () {
      $('.application-code').css('min-height', "".concat(aceHeight, "px"));
    });
    ModuleZabbixAgent5.editor = ace.edit('user-edit-config');
    ModuleZabbixAgent5.editor.getSession().setValue(configFileText);

    var NewMode = ace.require('ace/mode/julia').Mode;

    ModuleZabbixAgent5.editor.session.setMode(new NewMode());
    ModuleZabbixAgent5.editor.setTheme('ace/theme/monokai');
    ModuleZabbixAgent5.editor.resize();
    ModuleZabbixAgent5.editor.getSession().on('change', function () {
      // Trigger change event to acknowledge the modification
      Form.dataChanged();
    });
    ModuleZabbixAgent5.editor.setOptions({
      maxLines: rowsCount,
      showPrintMargin: false,
      showLineNumbers: false
    });
  },

  /**
   * Callback function to be called before the form is sent
   * @param {Object} settings - The current settings of the form
   * @returns {Object} - The updated settings of the form
   */
  cbBeforeSendForm: function cbBeforeSendForm(settings) {
    var result = settings;
    result.data = ModuleZabbixAgent5.$formObj.form('get values');
    result.data.configContent = ModuleZabbixAgent5.editor.getValue();
    return result;
  },

  /**
   * Some actions after forms send
   */
  cbAfterSendForm: function cbAfterSendForm() {},

  /**
   * Initialize form parameters
   */
  initializeForm: function initializeForm() {
    Form.$formObj = ModuleZabbixAgent5.$formObj;
    Form.url = "".concat(globalRootUrl, "module-zabbix-agent5/save");
    Form.validateRules = ModuleZabbixAgent5.validateRules;
    Form.cbBeforeSendForm = ModuleZabbixAgent5.cbBeforeSendForm;
    Form.cbAfterSendForm = ModuleZabbixAgent5.cbAfterSendForm;
    Form.initialize();
  }
};
$(document).ready(function () {
  ModuleZabbixAgent5.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,